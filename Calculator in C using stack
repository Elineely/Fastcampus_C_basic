#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node {
    char data[100];
    struct Node *next;
}Node;

typedef struct Stack{
    Node *top;
}Stack;

void push(Stack *stack,char *data){ //스택에 새로운 노드 삽입 함수
    Node *node = (Node*)malloc(sizeof (Node));
    strcpy(node->data, data);
    node->next = stack->top;
    stack->top = node;
}

char* getTop(Stack *stack){ //최상단 노드인 "Top"을 반환하는 함수
    Node *top = stack->top;
    return top->data;
}

char* pop(Stack *stack){ //스택 추출 함수(top을 스택에서 추출, 반환함)
    if (stack->top == NULL){
        printf("스택 언더플로우가 발생했습니다\n");
        return 0;
    }
    Node *node = stack->top;
    char *data = (char*)malloc(sizeof(char)*100);
    strcpy(data, node->data);
    stack->top = node->next;
    free(node);
    return data;
}

int getpriority(char *i){
    if(!strcmp(i,"(")) return 0;
    if(!strcmp(i,"+") || !strcmp(i,"-") ) return 1;
    if(!strcmp(i,"*") || !strcmp(i,"/") ) return 2;
    return 3;
}

char* transition(Stack *stack, char **s, int size) {
    char res[1000] = ""; // 후위 표기법으로 바뀐 문자열이 res배열에 담길 것임
    for (int i= 0; i<size; i++){
        if (!strcmp(s[i], "+") || !strcmp(s[i], "-") || !strcmp(s[i], "*") || !strcmp(s[i], "/")) { //s배열의 해당 원소가 연산자라면
            while(stack->top !=NULL && getpriority(getTop(stack)) >= getpriority(s[i])){ //stack의 top과 비교해서, top의 우선순위가 더 높거나 같다면(top값이 피연산자 or 더 우선 순위가 높은 연산자), 먼저 res배열에 top 값을 넣는다
                strcat(res,pop(stack)); strcat(res," "); //이때 각각의 항목이 띄어쓰기로 구분 된다
            }
            push(stack, s[i]); //스택에 s배열의 해당원소(i 인덱스를 가진)를 넣는다.
        }
        else if (!strcmp(s[i], "(")) push(stack,s[i]); //s[i]가 여는 괄호인 경우 바로 스택에 넣는다
        else if (!strcmp(s[i], ")")){
            while(strcmp(getTop(stack), "(")){
                strcat(res, pop(stack)); strcat(res," ");
            }
            pop(stack);
        }
        else { strcat(res, s[i]); strcat(res," "); } //일반숫자(피연산자)인 경우 바로 출력(s[i]를 " "로 구분해서 res배열에 넣는다
    }
    while (stack->top != NULL){
        strcat(res, pop(stack)); strcat(res," "); //stack에 남아있는 것 모두 res에 넣기(" ")로 구분
    }
    return res; //후위 표기법으로 변환된 res 배열을 반환
}
    
void calculate(Stack *stack, char **s, int size){
    int x, y, z;
    for(int i=0; i <size; i++){
        if(!strcmp(s[i], "+") || !strcmp(s[i],"-") || !strcmp(s[i],"*") || !strcmp(s[i],"/")){ //s[i]가 연산자 라면
            x = atoi(pop(stack));
            y = atoi(pop(stack)); //두개의 피연산자를 스택에서 꺼냄.(꺼낼때 문자열을 정수 타입으로 변경함)
            if(!strcmp(s[i],"+")) z= y+x;
            if(!strcmp(s[i],"-")) z= y-x;
            if(!strcmp(s[i],"*")) z= y*x;
            if(!strcmp(s[i],"/")) z= y/z; //꺼낸 피연산자를 계산. 스택의 구조상, y가 먼저 들어간 원소 이므로, 위와 같이 y를 앞에두어서 계산해야한다.
            char buffer[100]; //계산한 결과를 담을 버퍼
            sprintf(buffer, "%d", z); //계산 값(정수형)을 다시 문자열 형태로 바꾸어 버퍼에 담음
            push(stack, buffer); //계산 값을 스택에 다시 넣음
        }
        else{
            push(stack,s[i]); //s[i]가 숫자(피연산자)일 경우엔 바로 스택에 넣음 
        }
    }
    printf("%s\n",pop(stack)); //최종결과 출력(스택의 마지막 원소)
}

int main(void){
    Stack stack;
    stack.top = NULL; //스택 정의 및 초기화
    char a[100] = "( ( 3 + 4 ) * 5 ) - 5 * 7 * 5 - 5 * 10";
    int size = 1; //각각의 문자열의 갯수
    for(int i=0; i<strlen(a); i++){
        if(a[i] == ' ') size++; //공백을 만날때마다 문자열갯수 +1
    }
    char *ptr = strtok(a, " "); //각각 문자열을 공백으로 구분해서 분리
    char **input = (char**)malloc(sizeof(char*) * size);
    for (int i= 0; i < size; i++){
        input[i] = (char*)malloc(sizeof(char) * 100); // 각 문자열은 최대 100까지의 크기로 들어갈 수 있게 크기 할당
    }
    for(int i = 0; i <size; i++){
        strcpy(input[i],ptr); //토큰으로 분리된 각 문자열(ptr)을 계속 input 배열에 넣음
        ptr = strtok(NULL," "); // 계속해서 다음 토큰 불러옴
    }
    char b[1000] = "";
    strcpy(b, transition(&stack, input, size)); //input 문자열을 후위 표기법으로 바꾸어 b에 담기
    printf("후위 표기법 : %s\n", b);
    size = 1;
    for (int i = 0; i < strlen(b)-1; i++); { //마지막은 항상 공백이 들어가므로 1을 뺌
        if(b[1] ==' ') size++;
    }
    char *ptr2 = strtok(b, " ");
    for(int i=0; i < size; i++){
        strcpy(input[i],ptr2);
        ptr2 = strtok(NULL, " ");
    }
    calculate(&stack, input, size);
    system("pause");
    return 0;
}
