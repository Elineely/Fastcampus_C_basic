#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX_SIZE 10000 //우선 순위 큐에 담길 수 있는 최대 데이터의 크기

void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
} //데이터 삽입 및 삭제 후 최대 힙 구성 유지를 위해 2개 데이터의 위치를 바꾸는 함수 필요

typedef struct {
    int heap[MAX_SIZE]; // 1개의 힙을 배열 형태로 만듬
    int count; //힙에 들어있는 원소의 갯수를 저장할 변수
}priorityQueue; //구조체로 우선순위 큐 만듬

void push(priorityQueue *pq, int data){ //"특정한 우선순위 큐"에 "특정 데이터"를 넣는 형식
    if(pq->count >= MAX_SIZE) return; //최대 데이터 크기 이상은 들어가지 않음
    pq->heap[pq->count] = data; //특정 데이터는 힙 배열의 마지막 원소로서 들어감
    int now = pq->count; //삽입한 데이터의 현재 위치(인덱스)를 나타내는 변수
    int parent = (pq->count-1)/2; //부모노드 인덱스
    //새 원소 삽입 이후, 상향식으로 힙을 구성
    while(now > 0 && pq->heap[now] > pq->heap[parent]){
        swap(&pq->heap[now], &pq->heap[parent]); //부모보다 값이 크면 자리를 바꿈
        now = parent;
        parent = (parent - 1) / 2 ; //다시 바뀐 자리기준 반복될 수 있도록 초기화(상향식)
    }
    pq -> count++; //원소가 1개 늘음
}

int pop(priorityQueue *pq){
    if(pq->count <= 0) return -9999; //더 이상 추출할 원소가 없는 경우, 리턴 값으로 문제가 있음을 알림
    int res = pq->heap[0]; //res에 추출할 원소(root 노드의 값)를 담음
    pq->count--;
    pq->heap[0] = pq->heap[pq->count]; //가장 마지막 원소를 root노드 자리에 넣기
    int now = 0, leftChild =1, rightChild = 2;
    int target = now; //target은 자기 자신을 가리킴 -> 후엔 바꾸고자하는 자식노드를 가리킴
    //새 원소를 추출한 이후, 하향식으로 힙을 구성
    while (leftChild < pq->count){ //원소가 더 존재 할 때까지만 반복
        if(pq->heap[target] < pq->heap[leftChild]) target = leftChild;
        if(pq->heap[target] < pq->heap[rightChild] && rightChild < pq->count) target = rightChild;
        if(target == now) break; //자기 자신이 제일 큰 값일때(더 이상 내려가지 않아도 될 때 종료)
        else{
            swap(&pq->heap[now], &pq->heap[target]);
            //그 아래 노드를 기준으로 반복하기 위해 초기화(하향식)
            now = target;
            leftChild = now * 2 + 1;
            rightChild = now * 2 + 2;
        }
    }
    return res; //추출할 원소(이전 root 노드 값) 리턴
}
